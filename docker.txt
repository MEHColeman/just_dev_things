Create a dedicated user and group on the image, with minimal
permissions to run the application; use the same user to run this process.
For example, Node.js image which has a built-in node generic user:

FROM node:10-alpine
USER node
CMD node index.js

Use Snyk to scan a docker image:
$ snyk test --docker node:10 --file=path/to/
Dockerfile
Use Snyk to monitor and alert to newly disclosed vulnerabilities in a
docker image:
$ snyk monitor --docker node:10

Enforce Dockerfile best practices automatically by using a static code analysis tool
such as hadolint linter, that will detect and alert for issues found in a Dockerfile.
docker run --rm -i hadolint/hadolint < Dockerfile
or
hadolint <Dockerfile> if it is installed locally


docker run -it --rm -v 'local/machine/dir:/path/in/container' image bash
i - send stdin to container
t - interpret input as via terminal
v - mount volume
--rm - delete container when process completes
bash - command to run

docker tag a1df0eddba18 railsapp  # tag that image id


docker-compose run --rm <service name> <some command>

docker-compose [start|stop|kill|restart|pause|unpause|rm] \
                   <service name>

docker-compose logs [-f] <service name>

“docker-compose exec <service name> <some command>”

# Networking

docker network create <name>
docker network list
docker network inspect <network id>


# Dev Notes
Maybe, once its all working, look at using alpine as a base image.
https://hub.docker.com/_/alpine/

Debugging a dockerfile:
Stop intermediate files being removed with --rm=false
docker container run -it --name=debug <container_id> /bin/sh

Tidying up: docker system prune


alias ctop='docker run --rm -ti -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop:latest'
