# Git

See [git flight rules](https://github.com/k88hudson/git-flight-rules) for useful
notes.

## Stashing

  git stash save "message"
  git stash list
  git stash pop <index>
    or git stash apply (doesn't remove stash)
  git stash drop <index>

## Logs

  git shlg      # pretty, compact log
  git lg        # pretty, longer log
  git pl        # pretty log
  git diff --stat <ref>     # bar chart of changes

  git blame filename
  git reflog

## Merging

Merge the named branch onto the current branch

## Rebasing

Unwind the current branch and replay all the changes onto the tip of the named branch.

### Interactive rebasing

```
  git rebase -i <ref to root of rebase>
```
Then, pick edit or squash (onto previous) commits. Delete the line to remove
You can also change the order of commits.
Editing allows you to further --amend the message, or split a commit in two.

Splitting a commit
As well as the above, you can split the most recent commit by ```git reset HEAD~```

### Merge conflicts
I have 3 way diffs configured in gitconfig:
```
[merge]
  conflictstyle = diff3
```

Git nomenclature is pretty poor for this. Here is what the three sections are telling you:
```
<<<<< the commit you are trying to apply
Your changes here
||||||
common ancestor to both commits
original file here
======
commit that is causing conflict with the commit you are trying to apply
>>>>>
```

### Splitting A Commit
To split the last commit into multiple commits
```
git reset HEAD~
```
Now add commits the regular way.

To split a commit further in the history:
```
pick 123abc bunch of changes
edit a1b2c3 commit you want to split
pick abc321 another commit to leave as-is
```

Once git has reached the point that you've chosen to edit, you can adjust the
commit as before and then continue:
```
  git reset HEAD^
  git add <half the files>
  git commit
  git add <other half>
  git commit
  git rebase --continue
```

I also like to use
```
git add -p
```
to interactively add commit segments. Also, see the vim tool that is very useful.

To interactively add segments of a new file, you need git to start tracking the new file first.
```
git add -N filename
```

## Retrieving a different version of a file

To check out a different version of a file, so that you can compare it with the
current version:
```
git show framework:cv.md > old_cv.md
```

## Moving a branch pointer
```
  git branch -f name_of_branch_to_move commit_ref_to_point_to
```






## Github hub extensions

Github has a lot of features accessible with ```hub```

[Taken from https://hub.github.com/]
## As a contributor to open-source
Whether you are beginner or an experienced contributor to open-source, hub makes it easier to fetch repositories, navigate project pages, fork repos and even submit pull requests, all from the command-line.

```
# clone your own project
$ git clone dotfiles
→ git clone git://github.com/YOUR_USER/dotfiles.git

# clone another project
$ git clone github/hub
→ git clone git://github.com/github/hub.git

# see the current project's issues
$ git browse -- issues
→ open https://github.com/github/hub/issues

# open another project's wiki
$ git browse mojombo/jekyll wiki
→ open https://github.com/mojombo/jekyll/wiki

# Example workflow for contributing to a project:
$ git clone github/hub
$ cd hub
# create a topic branch
$ git checkout -b feature
  ( making changes ... )
$ git commit -m "done with feature"

# It's time to fork the repo!
$ git fork
→ (forking repo on GitHub...)
→ git remote add YOUR_USER git://github.com/YOUR_USER/hub.git

# push the changes to your new remote
$ git push YOUR_USER feature
# open a pull request for the topic branch you've just pushed
$ git pull-request
→ (opens a text editor for your pull request message)
```

## As an open-source maintainer
Maintaining a project is easier when you can easily fetch from other forks, review pull requests and cherry-pick URLs. You can even create a new repo for your next thing.

```
# fetch from multiple trusted forks, even if they don't yet exist as remotes
$ git fetch mislav,cehoffman
→ git remote add mislav git://github.com/mislav/hub.git
→ git remote add cehoffman git://github.com/cehoffman/hub.git
→ git fetch --multiple mislav cehoffman

# check out a pull request for review
$ git checkout https://github.com/github/hub/pull/134
→ (creates a new branch with the contents of the pull request)

# directly apply all commits from a pull request to the current branch
$ git am -3 https://github.com/github/hub/pull/134

# cherry-pick a GitHub URL
$ git cherry-pick https://github.com/xoebus/hub/commit/177eeb8
→ git remote add xoebus git://github.com/xoebus/hub.git
→ git fetch xoebus
→ git cherry-pick 177eeb8

# `am` can be better than cherry-pick since it doesn't create a remote
$ git am https://github.com/xoebus/hub/commit/177eeb8

# open the GitHub compare view between two releases
$ git compare v0.9..v1.0

# put compare URL for a topic branch to clipboard
$ git compare -u feature | pbcopy

# create a repo for a new project
$ git init
$ git add . && git commit -m "It begins."
$ hub create -d "My new thing"
→ (creates a new project on GitHub with the name of current directory)
$ git push origin master
```
## Using GitHub for work
Save time at work by opening pull requests for code reviews and pushing to multiple remotes at once. Even GitHub Enterprise is supported.

```
# whitelist your GitHub Enterprise hostname
$ git config --global --add hub.host my.example.org

# open a pull request using a message generated from script, then put its URL to the clipboard
$ git push origin feature
$ git pull-request -F prepared-message.md | pbcopy
→ (URL ready for pasting in a chat room)

# push to multiple remotes
$ git push production,staging
```

## Git Cherry
git cherry tag_a tag_b -v
will list with a + any commits in tag_b that are not in tag_a
will list with a - any commits in tag_b that are equivalent to commits in tag_a
So, concentrate on the + commits. They are missing from tag_a

Git Stash

```git stash show``` will show a very brief list of files that were saved in the stash
```git stash show -p``` will show the changes vs the current HEAD
You can specify the stash you wish to compare: ```git stash show -p stash@{2}```

To set an upstream tracking branch:
```
git push -u <remote> <branch>
git branch -vv          # show tracking branches
git checkout --track remote/branch   fetch, checkout and track a remote branch
git branch -u remote/remote_branch_name     # track current branch at specified remote branch

