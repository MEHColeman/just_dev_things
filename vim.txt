# Vim Notes

## Text
  :set textwidth=79 to automatically insert lines breaks after 79 characters
  gq  to wrap the text on the current line

:set wrap linebreak nolist  to display long lines as multiple screen lines

## Spelling
  :setlocal spell  # turn on spell-checking
  :set nospell     # turn off spell-checking
  :setlocal spell spelllang=en_gb   # specify language
  ]s               # move to next spelling mistake
  zg               # add the highlighted word to the dictionary
  z=               # suggest words for word under cursor

## New files
  :e filename    # start editing a new file
## Writing files
  :sudowrite   write protected file (via eunuch plugin)

  :sav   # save a file with a new name, continue editing the new name
  :w     # save a file with a new name, continue editing the old name
  :w %:h/filename  # save filename in home directory of current file

Copy and Pasting

y will yank the target into a buffer
p will paste buffer after cursor
P will paste buffer before cursor

ayy = copy to buffer a
ap  = paste from buffer b

"+y = copy to OS copy buffer

## Tabs
  :tabnew   # create a new tab
  :tabclose # close tab
  {i}gt     # go to next tab
  gT        # go to previous tab
  ctrl-w T  # move window to new tab
  :tabdo <: command, e.g. %s/foo/bar/g> do command in all tabs

## Folds
  :set fdm=syntax

  zc, zo, za  - close, open, toggle fold at cursor
  zC, zO, zA  - close, open, toggle all folds at cursor

  zr, zR  - open one more (or all) level of folds throughout the buffer
  zm, zM  - close one (all) level of folds throughout the buffer

## Windows
  ctrl-w    # window operation
    s       # split horizontally
    v       #split vertically

## CTAGS
  ,b              # tagbar
  ,.              # ctrlP browser
  ctrl-}          # navigate to tag under cursor
  :tag <name>     # navigate to named tag
  :pop            # pop navigation stack
  :tnext
  :tprev          # navigate through multiple definitions

##  Comments
NERDCommenter is good for this
  ,c              # (un)comment selection
  ,cc             # comment current line
  ,cn             # comment current line, force nesting
  ,ci             # invert selection comments

## Macros
  q<letter>       # start recording
  q               # finish recording
  @<letter>       # run macro
  @@              # repeat macro

### Editing macros
  "<letter>p      # paste macro buffer
  0"<letter>y$    # copy current line into macro

## sed things
to delete all lines containing "profile"
:g/profile/d

delete all lines that are empty or that contain only whitespace:
:g/^\s*$/d

To delete all lines that do not contain a pattern, use g! or the equivalent v,
like this command to delete all lines that are not comment lines in a Vim
script:
:g!/^\s*"/d
:v/^\s*"/d

delete all lines except those that contain "error" or "warn" or "fail"
:v/error\|warn\|fail/d

## Surrounding things
cs "'          swap "" to ''
cs '<blah>     swap ' to <blah></blah>
ci"            change all in ""
ysiw *         surround the current word with *

## Fugitive

Fugitive is awesome!

Things you can do:
:Gstatus - editable git status
  - to toggle current file between staged and unstaged
  p to patch current file
  <enter> to open the current file
  C to commit (by adding a commit message)
Navigate files with ctrl-n and ctrl-p to navigate files

:Gdiff - run a vimdiff on the current file (index | working copy)
  :Gwrite - write the working copy to the index, or vice versa!
  :Gread - the other way round
  :diffget - (a vim command) get the change from the other diffed file) (do)
  :diffput - (a vim command) put the change to the other diffed file) (dp)
  :diffupdate - update vimdiff formatting

:Gedit <file> (or :0 for current file) to edit the git index version of a file

Merge conflicts: 3-way vimdiff
target branch | working copy | merge branch
Now you will need to use :diffget and :diffput with the bufspec or buffer name.
You can wind out what these are with :ls

]c and [c to jump between conflicts.
:dp shortcut to :diffput <target> | diffup that assumes target is working copy.

:Gedit branch:path/to/file - open a read-only copy of file on another branch
:Gedit branch:% etc
:Gedit <sha> - to view the commit info, interactively. <enter> on objects to see more

:Glog - loo
:Glog -- show list of commits in quickfix list
:Glog -- % show list of commits involving current file in quickfix
:Glog --grep=text --  grep the commit messages for text
:Glog -Stext   to grep within commit diffs
:Ggrep text branch   to git grep into quickfix

Quickfix
:cn(ext) open next file
:copen open file under cursor
:cnf open first file.

Refactoring Ruby
:RAddParameter           - Add Parameter
:RInlineTemp             - Inline Temp
:RConvertPostConditional - Convert Post Conditional
:RExtractConstant        - Extract Constant          (visual selection)
:RExtractLet             - Extract to Let (Rspec)
:RExtractLocalVariable   - Extract Local Variable    (visual selection)
:RRenameLocalVariable    - Rename Local Variable     (visual selection/variable under the cursor, *REQUIRES matchit.vim*)
:RRenameInstanceVariable - Rename Instance Variable  (visual selection, *REQUIRES matchit.vim*)
:RExtractMethod          - Extract Method            (visual selection, *REQUIRES matchit.vim*)

:nnoremap <leader>rap  :RAddParameter<cr>
:nnoremap <leader>rcpc :RConvertPostConditional<cr>
:nnoremap <leader>rel  :RExtractLet<cr>
:vnoremap <leader>rec  :RExtractConstant<cr>
:vnoremap <leader>relv :RExtractLocalVariable<cr>
:nnoremap <leader>rit  :RInlineTemp<cr>
:vnoremap <leader>rrlv :RRenameLocalVariable<cr>
:vnoremap <leader>rriv :RRenameInstanceVariable<cr>
:vnoremap <leader>rem  :RExtractMethod<cr>



File greps with easygrep
<Leader>vv  - Grep for the word under the cursor, match all occurences,
              like |gstar|
<Leader>vV  - Grep for the word under the cursor, match whole word, like
              |star|
<Leader>va  - Like vv, but add to existing list
<Leader>vA  - Like vV, but add to existing list
<Leader>vr  - Perform a global search on the word under the cursor
              and prompt for a pattern with which to replace it.
<Leader>vo  - Select the files to search in and set grep options
<Leader>vy* - Invoke any option from the options explorer, where * is the
              shortcut for that option.
              e.g. <Leader>vyr - toggles recursion
                   <Leader>vyb - sets buffer grepping mode
                   etc.
Commands:

:Grep [arg]
    Search for the specified arg, like <Leader>vv.  When an ! is added,
    search like <Leader>vV
:Replace [target] [replacement]
:ReplaceUndo
